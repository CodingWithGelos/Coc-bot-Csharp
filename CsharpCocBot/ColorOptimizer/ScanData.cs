using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ColorOptimizer
{
	public class ScanData
	{

		public ScanData(string rootDirectory, string className)
		{
			if (!Directory.Exists(rootDirectory))
			{
				MessageBox.Show(string.Format("{0} is missing or empty!\nPlease create one subdirectory for each item you need to detect,\nand put in each directory all the bitmaps corresponding to that item.\n(only .bmp or .png, no .jpg)", rootDirectory));
				return;
			}
			List<DataPerCategory> mainList = new List<DataPerCategory>();
			var directories = Directory.EnumerateDirectories(rootDirectory);
			foreach (string directory in directories)
			{
				string path = directory;
				string name = Path.GetFileName(path);
				string[] files = Directory.EnumerateFiles(path, "*.png").Concat(Directory.EnumerateFiles(path, "*.bmp")).ToArray();
				DataPerCategory category = new DataPerCategory(name, files);
				if (category.GoodSnaps.Count > 0)
					mainList.Add(new DataPerCategory(name, files));
			}

			//OK, now all initial Good color lists are processed, let remove those that are bad
			foreach (DataPerCategory category in mainList)
				category.Process(mainList);
			ExportFile(Path.Combine(rootDirectory, className + ".cs"), className, mainList);
		}


		public void ExportFile(string path, string className, List<DataPerCategory> mainList)
		{
			if (File.Exists(path))
				if (MessageBox.Show("The script file already exists, do you want to overwrite it ?", path, MessageBoxButtons.OKCancel, MessageBoxIcon.Warning) == DialogResult.Cancel)
					return;
				else
					File.Delete(path);
			List<string> script = new List<string>();
			script.Add(string.Format("// This file was generated by a tool. Any change may be lost. "));
			script.Add(string.Format("// Generated by ColorOptimizer {0} {1}", DateTime.Now.ToLongTimeString(), DateTime.Now.ToLongDateString()));
			script.Add(string.Format("// Original tool written by FastFrench"));
			script.Add("");

			#region Writes stats in comments
			foreach (DataPerCategory category in mainList)
			{
				script.Add(string.Format("// {0} : {1} colors (start {2} => all good {3} => not in bad {4})", category.Label, category.SelectedColorsSoFar.Count, category.ColorsLeftAfterFirstGood, category.ColorsLeftAfterLastGood, category.ColorsLeftAfterAllBad));
				if (!string.IsNullOrEmpty(category.KilledBy))
					script.Add(string.Format("//    => the last colors for {0} were killed by {1}", category.Label, category.KilledBy));
			}
			#endregion Writes stats in comments

			script.Add("");			
			script.Add("namespace CoC.Bot.Data.ColorList {");
			script.Add("");
			script.Add("\tpublic static class " + className + "  {");

			#region Enum
			script.Add("\t\tpublic enum Items {");
			foreach (DataPerCategory category in mainList)
				script.Add(string.Format("\t\t\t{0},",category.Label));
			script.Add("\t\t}");
			script.Add("");
			#endregion Enum

			#region Extract data from each category
			foreach (DataPerCategory category in mainList)
			{
				script.Add(string.Format("\t\t// {0} has {1} colors (computed from {2} good files and {3} bad files) ", category.Label, category.SelectedColorsSoFar.Count(), category.GoodSnaps.Count, category.BadSnaps.Count));
				script.Add(string.Format("\t\t{1} {0} = {2}", category.Label, "static int[]", "{"));
				int targetCount = 0;
				foreach (var pair in category.SelectedColorsSoFar.OrderByDescending(kp => kp.Value).Take(10))
				{
					script.Add(string.Format("\t\t\t0x{0}, // weight: {1} ", pair.Key.ToString("X8"), pair.Value));
					targetCount += pair.Value;
				}					
				script.Add(string.Format("\t\t\t{0};", "}"));
				script.Add(string.Format("\t\tstatic int {0}_count = {1}; // Minimum number of pixels from that colorList that should be found on each building of this kind", category.Label, targetCount));				
				script.Add("");
			}
			#endregion Extract data from each category

			#region GetColorList
			script.Add("");
			script.Add("\t\tstatic public int[] GetColorList(Items item)");
			script.Add("\t\t{");
			script.Add("\t\t\tswitch(item)");
			script.Add("\t\t\t{");			
			foreach (DataPerCategory category in mainList)
			{
				script.Add(string.Format("\t\t\t\tcase Items.{0}: return {1};", category.Label, category.Label));
			}
			script.Add("\t\t\t\tdefault: return null;");
			script.Add("\t\t\t}");
			script.Add("\t\t} // GetColorList");
			#endregion GetColorList


			#region GetColorList
			script.Add("");
			script.Add("\t\tstatic public int GetColorCount(Items item)");
			script.Add("\t\t{");
			script.Add("\t\t\tswitch(item)");
			script.Add("\t\t\t{");
			foreach (DataPerCategory category in mainList)
			{
				script.Add(string.Format("\t\t\t\tcase Items.{0}: return {1}_count;", category.Label, category.Label));
			}
			script.Add("\t\t\t\tdefault: return 0;");
			script.Add("\t\t\t}");
			script.Add("\t\t} // GetColorCount");
			#endregion GetColorList

			

			script.Add("\t}");
			script.Add("}");
			
			script.Add("");

			
			
			File.WriteAllLines(path, script);
		}
	}
}
