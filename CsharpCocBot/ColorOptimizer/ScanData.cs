using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ColorOptimizer
{
	public class ScanData
	{

		public ScanData()
		{
			if (!Directory.Exists(Properties.Settings.Default.DataPath))
			{
				MessageBox.Show(string.Format("{0} is missing or empty!\nPlease create one subdirectory for each item you need to detect,\nand put in each directory all the bitmaps corresponding to that item.\n(only .bmp or .png, no .jpg)", Properties.Settings.Default.DataPath));
			}
			List<DataPerCategory> mainList = new List<DataPerCategory>();
			var directories = Directory.EnumerateDirectories(Properties.Settings.Default.DataPath);
			foreach (string directory in directories)
			{
				string path = directory;//Path.Combine(Properties.Settings.Default.DataPath, directory);
				string name = Path.GetFileName(path);
				string[] files = Directory.EnumerateFiles(path, "*.png").Concat(Directory.EnumerateFiles(path, "*.bmp")).ToArray();
				DataPerCategory category = new DataPerCategory(name, files);
				if (category.GoodSnaps.Count > 0)
					mainList.Add(new DataPerCategory(name, files));
			}

			//OK, now all initial Good color lists are processed, let remove those that are bad
			foreach (DataPerCategory category in mainList)
				category.Process(mainList);
			ExportFile(Path.Combine(Properties.Settings.Default.DataPath, "ColorLists.cs"), mainList);
		}
		public void ExportFile(string path, List<DataPerCategory> mainList)
		{
			if (File.Exists(path))
				if (MessageBox.Show("The script file already exists, do you want to overwrite it ?", path, MessageBoxButtons.OKCancel, MessageBoxIcon.Warning) == DialogResult.Cancel)
					return;
				else
					File.Delete(path);
			List<string> script = new List<string>();
			script.Add(string.Format("// This file was generated by a tool. Any change may be lost. "));
			script.Add(string.Format("// Generated by ColorOptimizer {0} {1}", DateTime.Now.ToLongTimeString(), DateTime.Now.ToLongDateString()));
			script.Add("");
			foreach (DataPerCategory category in mainList)
				script.Add(string.Format("// {0} : {1} colors (start {2} => all good {3} => not in bad {4})", category.Label, category.SelectedColorsSoFar.Count, category.ColorsLeftAfterFirstGood,  category.ColorsLeftAfterLastGood, category.ColorsLeftAfterAllBad));
			script.Add("namespace CoC.Bot.Data {");
			script.Add("\tpublic static class ColorLists  {");

			foreach (DataPerCategory category in mainList)
			{
				script.Add(string.Format("\t\t// {0} has {1} colors", category.Label, category.SelectedColorsSoFar.Count()));
				script.Add(string.Format("\t\t\t{1} {0} = {2}", category.Label, "public static int[]", "{"));
				foreach(var pair in category.SelectedColorsSoFar)
					script.Add(string.Format("\t\t\t\t0x{0}, // weight: {1} ", pair.Key.ToString("X8"), pair.Value));
				script.Add(string.Format("\t\t\t{0};", "}"));
				script.Add("");				
			}
			script.Add("\t}");
			script.Add("}");
			
			File.WriteAllLines(path, script);
		}
	}
}
